load("//tools:cc_rules.bzl", "cc_binary", "cc_library")

# If you want to embed the rain compiler into your own binary, this is the library I'd recommend you
# link to.
cc_library(
    name = "lib",
    hdrs = ["rain.hpp"],
    visibility = ["//visibility:public"],
    deps = [
        ":lib_compile",
        ":lib_decompile",
        ":lib_link",
    ],
)

# The rain compiler is split into three parts: compile, link, and decompile.
# These are split into separate parts to avoid having global ctors in some dependencies bloat the
# size of binaries that don't need that part of the library.

# For reference, linking the wasm2wat binary with LLVM (even though it is not used at all) increases
# the binary size from 398KiB to 9.4MiB -- making it 24x the size!

cc_library(
    name = "lib_compile",
    srcs = ["lib/compile.cpp"],
    hdrs = [
        "buffer.hpp",
        "compile.hpp",
    ],
    deps = [
        "//rain/lang",
        "//rain/lang/target/wasm",
        "//rain/util",
    ],
)

cc_library(
    name = "lib_link",
    srcs = ["lib/link.cpp"],
    hdrs = [
        "buffer.hpp",
        "link.hpp",
    ],
    deps = [
        "//rain/lang",
        "//rain/util",
        "@llvm-project//llvm:IRReader",
    ],
)

cc_library(
    name = "lib_decompile",
    srcs = ["lib/decompile.cpp"],
    hdrs = [
        "buffer.hpp",
        "decompile.hpp",
    ],
    deps = [
        "//rain/lang/err",
        "//rain/util",
        "@wabt",
    ],
)

# Shared components between each of the standalone tools.
# This is useful to avoid duplicating the framework to get the WASM binaries to be easily callable.
cc_library(
    name = "bin_common",
    hdrs = ["bin/common.hpp"],
    deps = ["//rain/util"],
)

filegroup(
    name = "tools",
    srcs = [
        ":llvm2wasm",
        ":rain2llvm",
        ":rainc",
        ":wasm2wat",
    ],
)

# Standalone tool. This binary combines all the other tools into one.
cc_binary(
    name = "rainc",
    srcs = ["bin/rainc.cpp"],
    deps = [
        ":bin_common",
        ":lib",
    ],
)

################################################################
# Below are the standalone tools that are used to compile Rain code to various other formats.
#
# The benefit of having separate tools is that each of the WASM binaries can be cached separately if
# only some are needed, or if individual parts are being updated.
#
# The tradeoff being the increased size -- each binary has to contain their own copy of common
# functionality, like the malloc implementation, or the LLVM library.
################################################################

# A tool with the singular usecase of compiling Rain code to LLVM IR.
cc_binary(
    name = "rain2llvm",
    srcs = ["bin/rain2llvm.cpp"],
    deps = [
        ":bin_common",
        ":lib_compile",
    ],
)

# A tool with the singular usecase of compiling LLVM IR to WASM.
cc_binary(
    name = "llvm2wasm",
    srcs = ["bin/llvm2wasm.cpp"],
    deps = [
        ":bin_common",
        ":lib_link",
    ],
)

# A tool with the singular usecase of decompiling WASM to its text format WAT.
cc_binary(
    name = "wasm2wat",
    srcs = ["bin/wasm2wat.cpp"],
    deps = [
        ":bin_common",
        ":lib_decompile",
    ],
)
