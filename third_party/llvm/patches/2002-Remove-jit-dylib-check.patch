diff --git a/llvm/lib/ExecutionEngine/ExecutionEngine.cpp b/llvm/lib/ExecutionEngine/ExecutionEngine.cpp
index 768d845..99164e1 100644
--- a/llvm/lib/ExecutionEngine/ExecutionEngine.cpp
+++ b/llvm/lib/ExecutionEngine/ExecutionEngine.cpp	
@@ -506,43 +506,43 @@ EngineBuilder::setSymbolResolver(std::unique_ptr<LegacyJITSymbolResolver> SR) {
 ExecutionEngine *EngineBuilder::create(TargetMachine *TM) {
   std::unique_ptr<TargetMachine> TheTM(TM); // Take ownership.
 
-  // Make sure we can resolve symbols in the program as well. The zero arg
-  // to the function tells DynamicLibrary to load the program, not a library.
-  if (sys::DynamicLibrary::LoadLibraryPermanently(nullptr, ErrorStr))
-    return nullptr;
-
-  // If the user specified a memory manager but didn't specify which engine to
-  // create, we assume they only want the JIT, and we fail if they only want
-  // the interpreter.
-  if (MemMgr) {
-    if (WhichEngine & EngineKind::JIT)
-      WhichEngine = EngineKind::JIT;
-    else {
-      if (ErrorStr)
-        *ErrorStr = "Cannot create an interpreter with a memory manager.";
-      return nullptr;
-    }
-  }
-
-  // Unless the interpreter was explicitly selected or the JIT is not linked,
-  // try making a JIT.
-  if ((WhichEngine & EngineKind::JIT) && TheTM) {
-    if (!TM->getTarget().hasJIT()) {
-      errs() << "WARNING: This target JIT is not designed for the host"
-             << " you are running.  If bad things happen, please choose"
-             << " a different -march switch.\n";
-    }
-
-    ExecutionEngine *EE = nullptr;
-    if (ExecutionEngine::MCJITCtor)
-      EE = ExecutionEngine::MCJITCtor(std::move(M), ErrorStr, std::move(MemMgr),
-                                      std::move(Resolver), std::move(TheTM));
-
-    if (EE) {
-      EE->setVerifyModules(VerifyModules);
-      return EE;
-    }
-  }
+  // // Make sure we can resolve symbols in the program as well. The zero arg
+  // // to the function tells DynamicLibrary to load the program, not a library.
+  // if (sys::DynamicLibrary::LoadLibraryPermanently(nullptr, ErrorStr))
+  //   return nullptr;
+
+  // // If the user specified a memory manager but didn't specify which engine to
+  // // create, we assume they only want the JIT, and we fail if they only want
+  // // the interpreter.
+  // if (MemMgr) {
+  //   if (WhichEngine & EngineKind::JIT)
+  //     WhichEngine = EngineKind::JIT;
+  //   else {
+  //     if (ErrorStr)
+  //       *ErrorStr = "Cannot create an interpreter with a memory manager.";
+  //     return nullptr;
+  //   }
+  // }
+
+  // // Unless the interpreter was explicitly selected or the JIT is not linked,
+  // // try making a JIT.
+  // if ((WhichEngine & EngineKind::JIT) && TheTM) {
+  //   if (!TM->getTarget().hasJIT()) {
+  //     errs() << "WARNING: This target JIT is not designed for the host"
+  //            << " you are running.  If bad things happen, please choose"
+  //            << " a different -march switch.\n";
+  //   }
+
+  //   ExecutionEngine *EE = nullptr;
+  //   if (ExecutionEngine::MCJITCtor)
+  //     EE = ExecutionEngine::MCJITCtor(std::move(M), ErrorStr, std::move(MemMgr),
+  //                                     std::move(Resolver), std::move(TheTM));
+
+  //   if (EE) {
+  //     EE->setVerifyModules(VerifyModules);
+  //     return EE;
+  //   }
+  // }
 
   // If we can't make a JIT and we didn't request one specifically, try making
   // an interpreter instead.