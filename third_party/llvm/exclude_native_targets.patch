diff --git a/utils/bazel/configure.bzl b/utils/bazel/configure.bzl
index eaf3e5b01f5e..88a576548e16 100644
--- a/utils/bazel/configure.bzl
+++ b/utils/bazel/configure.bzl
@@ -140,28 +140,6 @@ def _write_dict_to_file(repository_ctx, filepath, header, vars):
 
     repository_ctx.file(filepath, content = fci + fcd + fct)
 
-def _native_target_defines(arch, triple, targets):
-    include_native_target = arch in targets
-    llvm_native_target_defines = []
-    if include_native_target:
-        # Not having these defined for the project is useful when building a compiler that can _only_ cross-compile.
-        llvm_native_target_defines = [
-            "LLVM_NATIVE_ASMPARSER=LLVMInitialize{}AsmParser".format(arch),
-            "LLVM_NATIVE_ASMPRINTER=LLVMInitialize{}AsmPrinter".format(arch),
-            "LLVM_NATIVE_DISASSEMBLER=LLVMInitialize{}Disassembler".format(arch),
-            "LLVM_NATIVE_TARGET=LLVMInitialize{}Target".format(arch),
-            "LLVM_NATIVE_TARGETINFO=LLVMInitialize{}TargetInfo".format(arch),
-            "LLVM_NATIVE_TARGETMC=LLVMInitialize{}TargetMC".format(arch),
-            "LLVM_NATIVE_TARGETMCA=LLVMInitialize{}TargetMCA".format(arch),
-        ]
-
-    return llvm_native_target_defines + [
-        # These are required to be defined, otherwise the build will fail.
-        r'LLVM_NATIVE_ARCH=\"{}\"'.format(arch if include_native_target else ""),
-        r'LLVM_HOST_TRIPLE=\"{}\"'.format(triple if include_native_target else ""),
-        r'LLVM_DEFAULT_TARGET_TRIPLE=\"{}\"'.format(triple if include_native_target else ""),
-    ]
-
 def _llvm_configure_impl(repository_ctx):
     _overlay_directories(repository_ctx)
 
@@ -180,21 +158,9 @@ def _llvm_configure_impl(repository_ctx):
 
     # Create a starlark file with the requested LLVM targets.
     targets = repository_ctx.attr.targets
-    llvm_native_target_defines = select({
-        "@bazel_tools//src/conditions:windows": _native_target_defines("X86", "x86_64-pc-win32", targets),
-        "@bazel_tools//src/conditions:darwin_arm64": _native_target_defines("AArch64", "arm64-apple-darwin", targets),
-        "@bazel_tools//src/conditions:darwin_x86_64": _native_target_defines("X86", "x86_64-unknown-darwin", targets),
-        "@bazel_tools//src/conditions:linux_aarch64": _native_target_defines("AArch64", "aarch64-unknown-linux-gnu", targets),
-        "@bazel_tools//src/conditions:linux_ppc64le": _native_target_defines("PowerPC", "powerpc64le-unknown-linux-gnu", targets),
-        "@bazel_tools//src/conditions:linux_s390x": _native_target_defines("SystemZ", "systemz-unknown-linux_gnu", targets),
-        "//conditions:default": _native_target_defines("X86", "x86_64-unknown-linux-gnu", targets),
-    })
     repository_ctx.file(
         "llvm/targets.bzl",
-        content = "\n".join([
-            "llvm_targets = " + str(targets),
-            "llvm_native_target_defines = " + str(llvm_native_target_defines),
-        ]),
+        content = "llvm_targets = " + str(targets),
         executable = False,
     )
 
diff --git a/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel b/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
index 346dc669a28a..ab731e19ef56 100644
--- a/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
+++ b/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
@@ -7,7 +7,7 @@ load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
 load(":binary_alias.bzl", "binary_alias")
 load(":config.bzl", "llvm_config_defines")
 load(":enum_targets_gen.bzl", "enum_targets_gen")
-load(":targets.bzl", "llvm_targets", "llvm_native_target_defines")
+load(":targets.bzl", "llvm_targets")
 load(":tblgen.bzl", "gentbl")
 
 package(
@@ -150,7 +150,7 @@ cc_library(
         "include/llvm/Config/llvm-config.h",
     ],
     copts = llvm_copts,
-    defines = llvm_config_defines + llvm_native_target_defines,
+    defines = llvm_config_defines,
     includes = ["include"],
     textual_hdrs = [
         "include/llvm/Config/AsmParsers.def",
diff --git a/utils/bazel/llvm-project-overlay/llvm/config.bzl b/utils/bazel/llvm-project-overlay/llvm/config.bzl
index b0a0a331e278..2e3bff53ead9 100644
--- a/utils/bazel/llvm-project-overlay/llvm/config.bzl
+++ b/utils/bazel/llvm-project-overlay/llvm/config.bzl
@@ -12,6 +12,20 @@ load(
     "LLVM_VERSION_PATCH",
 )
 
+def native_arch_defines(arch, triple):
+    return [
+        r'LLVM_NATIVE_ARCH=\"{}\"'.format(arch),
+        "LLVM_NATIVE_ASMPARSER=LLVMInitialize{}AsmParser".format(arch),
+        "LLVM_NATIVE_ASMPRINTER=LLVMInitialize{}AsmPrinter".format(arch),
+        "LLVM_NATIVE_DISASSEMBLER=LLVMInitialize{}Disassembler".format(arch),
+        "LLVM_NATIVE_TARGET=LLVMInitialize{}Target".format(arch),
+        "LLVM_NATIVE_TARGETINFO=LLVMInitialize{}TargetInfo".format(arch),
+        "LLVM_NATIVE_TARGETMC=LLVMInitialize{}TargetMC".format(arch),
+        "LLVM_NATIVE_TARGETMCA=LLVMInitialize{}TargetMCA".format(arch),
+        r'LLVM_HOST_TRIPLE=\"{}\"'.format(triple),
+        r'LLVM_DEFAULT_TARGET_TRIPLE=\"{}\"'.format(triple),
+    ]
+
 posix_defines = [
     "LLVM_ON_UNIX=1",
     "HAVE_BACKTRACE=1",
@@ -82,7 +96,15 @@ builtin_thread_pointer = select({
 })
 
 # TODO: We should split out host vs. target here.
-llvm_config_defines = os_defines + builtin_thread_pointer + [
+llvm_config_defines = os_defines + builtin_thread_pointer + select({
+    "@bazel_tools//src/conditions:windows": native_arch_defines("X86", "x86_64-pc-win32"),
+    "@bazel_tools//src/conditions:darwin_arm64": native_arch_defines("AArch64", "arm64-apple-darwin"),
+    "@bazel_tools//src/conditions:darwin_x86_64": native_arch_defines("X86", "x86_64-unknown-darwin"),
+    "@bazel_tools//src/conditions:linux_aarch64": native_arch_defines("AArch64", "aarch64-unknown-linux-gnu"),
+    "@bazel_tools//src/conditions:linux_ppc64le": native_arch_defines("PowerPC", "powerpc64le-unknown-linux-gnu"),
+    "@bazel_tools//src/conditions:linux_s390x": native_arch_defines("SystemZ", "systemz-unknown-linux_gnu"),
+    "//conditions:default": native_arch_defines("X86", "x86_64-unknown-linux-gnu"),
+}) + [
     "LLVM_VERSION_MAJOR={}".format(LLVM_VERSION_MAJOR),
     "LLVM_VERSION_MINOR={}".format(LLVM_VERSION_MINOR),
     "LLVM_VERSION_PATCH={}".format(LLVM_VERSION_PATCH),
