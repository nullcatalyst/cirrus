{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cirrus",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#constants"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"comment": "documentation comments",
					"name": "comment.line.documentation.cirrus",
					"match": "(///).*$",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.cirrus"
						}
					}
				},
				{
					"comment": "line comments",
					"name": "comment.line.cirrus",
					"match": "(//).*$",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.cirrus"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "control keywords",
					"name": "keyword.control.cirrus",
					"match": "\\b(await|break|continue|else|for|if|loop|return|while)\\b"
				},
				{
					"comment": "declaration keywords",
					"name": "keyword.declaration.cirrus",
					"match": "\\b(export|fn|import|interface|let|struct|var)\\b"
				},
				{
					"comment": "operator keywords",
					"name": "keyword.operator.cirrus",
					"match": "\\b(as|is)\\b"
				},
				{
					"comment": "self keyword",
					"name": "keyword.self.cirrus",
					"match": "\\b(self)\\b"
				},
				{
					"comment": "boolean keywords",
					"name": "keyword.declaration.bool.cirrus",
					"match": "\\b(false|true)\\b"
				},
				{
					"comment": "compile time execution operator",
					"name": "keyword.operator.hash.cirrus",
					"match": "(#)"
				},
				{
					"comment": "logical operators",
					"name": "keyword.operator.logical.cirrus",
					"match": "(\\^|\\||\\|\\||&&|!)"
				},
				{
					"comment": "math operators",
					"name": "keyword.operator.math.cirrus",
					"match": "(\\+|-|\\*|/|%)"
				},
				{
					"comment": "single equal",
					"name": "keyword.operator.assignment.cirrus",
					"match": "(?<![<>])=(?!=|>)"
				},
				{
					"comment": "return type operator",
					"name": "keyword.operator.returntype.cirrus",
					"match": "(->)"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.cirrus",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.cirrus",
					"match": "\\\\."
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"comment": "null keyword",
					"name": "constant.language.null.cirrus",
					"match": "\\b(null)\\b"
				},
				{
					"comment": "boolean keywords",
					"name": "constant.language.bool.cirrus",
					"match": "\\b(false|true)\\b"
				},
				{
					"comment": "ALL CAPS constants",
					"name": "constant.other.caps.cirrus",
					"match": "\\b[A-Z][A-Z0-9_]*\\b"
				},
				{
					"comment": "decimals and floats",
					"name": "constant.numeric.decimal.cirrus",
					"match": "\\b\\d[\\d_]*(\\.?)[\\d_]*\\b"
				},
				{
					"comment": "integers",
					"name": "constant.numeric.integer.cirrus",
					"match": "\\b\\d[\\d_]*\\b"
				},
				{
					"comment": "hexadecimal integers",
					"name": "constant.numeric.hex.cirrus",
					"match": "\\b0x[\\dA-Fa-f_]+\\b"
				},
				{
					"comment": "octal integers",
					"name": "constant.numeric.oct.cirrus",
					"match": "\\b0o[0-7_]+\\b"
				},
				{
					"comment": "binary integers",
					"name": "constant.numeric.bin.cirrus",
					"match": "\\b0b[01_]+\\b"
				}
			]
		}
	},
	"scopeName": "source.cirrus"
}